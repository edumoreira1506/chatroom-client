{"version":3,"sources":["models/User.js","config/constants.js","config/routes/PrivateRoute.js","config/routes/PublicRoute.js","pages/Login/index.js","models/Message.js","pages/Chat/index.js","config/routes/index.js","index.js"],"names":["isAuthenticated","Boolean","getUsername","window","localStorage","getItem","connectToChat","username","callback","socket","io","connect","on","onConnected","message","onMessage","isSender","PrivateRoute","Component","component","rest","authenticated","render","props","to","pathname","state","from","location","PublicRoute","Login","useState","setUsername","className","onSubmit","e","preventDefault","setItem","href","type","placeholder","required","value","onChange","target","isValid","messageClassName","classname","Chat","setMessage","messages","setMessages","setSocket","useEffect","socketIo","addMessage","newMessage","console","log","oldMessages","sendMessage","onValidated","onError","validate","error","alert","template","emit","map","index","key","Routes","path","exact","ReactDOM","document","getElementById"],"mappings":"8SAGaA,EAAkB,kBAAMC,QAAQC,MAEhCA,EAAc,kBAAMC,OAAOC,aAAaC,QAAQ,aAEhDC,EAAgB,SAACC,EAAUC,GACtC,IAAMC,EAASC,IAAGC,QCRK,yDDUvBF,EAAOG,GAAG,WAAW,WACnBJ,EAASK,YAAYJ,GAErBA,EAAOG,GAAG,WAAW,SAAAE,GACnBN,EAASO,UAAUD,UAKZE,EAAW,SAAAT,GAAQ,OAAIL,MAAkBK,GEMvCU,EAlBM,SAAC,GAAuC,IAA1BC,EAAyB,EAApCC,UAAyBC,EAAW,6BACpDC,EAAgBrB,IAChBO,EAAWL,IAEjB,OACE,kBAAC,IAAD,iBACOkB,EADP,CAEEE,OAAQ,SAAAC,GAAK,OACXF,EACE,kBAACH,EAAD,iBAAgBK,EAAhB,CAAuBhB,SAAUA,KAEjC,kBAAC,IAAD,CAAUiB,GAAI,CAAEC,SAAU,SAAUC,MAAO,CAAEC,KAAMJ,EAAMK,kBCMpDC,EAjBK,SAAC,GAAuC,IAA1BX,EAAyB,EAApCC,UAAyBC,EAAW,6BACnDC,EAAgBrB,IAEtB,OACE,kBAAC,IAAD,iBACOoB,EADP,CAEEE,OAAQ,SAAAC,GAAK,OACXF,EACE,kBAAC,IAAD,CAAUG,GAAI,CAAEC,SAAU,QAASC,MAAO,CAAEC,KAAMJ,EAAMK,aAExD,kBAACV,EAAeK,Q,QC0BXO,G,MAtCD,WAAO,IAAD,EACgBC,mBAAS,IADzB,mBACVxB,EADU,KACAyB,EADA,KAclB,OACE,6BAASC,UAAU,SACjB,yBAAKA,UAAU,gBACb,wBAAIA,UAAU,qBAAd,yBAIF,yBAAKA,UAAU,oBACb,0BAAMA,UAAU,cAAcC,SAnBhB,SAAAC,GAClBA,EAAEC,iBAEF9B,EAAcC,EAAU,CACtBM,YAAa,WACXV,OAAOC,aAAaiC,QAAQ,WAAY9B,GACxCJ,OAAOyB,SAASU,KAAO,YAcrB,2BACEL,UAAU,eACVM,KAAK,OACLC,YAAY,8BACZC,UAAQ,EACRC,MAAOnC,EACPoC,SAAU,SAAAR,GAAC,OAAIH,EAAYG,EAAES,OAAOF,UAEtC,2BAAOT,UAAU,eAAeM,KAAK,SAASG,MAAM,SAASD,UAAQ,S,yBC1BzEI,EAAU,SAAA/B,GAAO,OAAIb,QAAQa,ICH7BgC,G,MAAmB,SAAC,GAAD,IAAGvC,EAAH,EAAGA,SAAH,OAAkBwC,IACzC,gBACA,CACE,uBAAwB/B,EAAST,GACjC,uBAAwBS,EAAST,OA+EtByC,EA3EF,SAAC,GAAkB,IAAhBzC,EAAe,EAAfA,SAAe,EACGwB,mBAAS,IADZ,mBACrBjB,EADqB,KACZmC,EADY,OAEKlB,mBAAS,CAAC,CAAExB,SAAU,QAASO,QAAS,SAF7C,mBAErBoC,EAFqB,KAEXC,EAFW,OAGCpB,mBAAS,MAHV,mBAGrBtB,EAHqB,KAGb2C,EAHa,KAK7BC,qBAAU,WACR/C,EAAcC,EAAU,CACtBM,YAAa,SAAAyC,GACXF,EAAUE,IAEZvC,UAAWwC,MAEZ,CAAChD,IAEJ,IAMMgD,EAAa,SAAAC,GACjBC,QAAQC,IAAIR,GACZO,QAAQC,IAAIF,GACZ,IAAMG,EAAW,YAAQT,GAEzBC,EAAY,GAAD,mBAAKQ,GAAL,CAAkBH,MAGzBI,EAAc,SAAA9C,ID3CE,SAACA,EAASN,GAC5BqC,EAAQ/B,GAAiBN,EAASqD,cAE/BrD,EAASsD,QAAQ,oCCyCtBC,CAASjD,EAAS,CAChBgD,QAAS,SAAAE,GAAK,OAAIC,MAAMD,IACxBH,YAAa,WACX,IAAML,EDzCU,SAACjD,EAAUO,GAAX,MAAwB,CAC9CP,WAAUO,WCwCeoD,CAAS3D,EAAUO,GAEtCL,EAAO0D,KAAK,UAAWX,GAEvBD,EAAWC,OAKjB,OACE,6BAASvB,UAAU,QACjB,wBAAIA,UAAU,iBAEViB,EAASkB,KAAI,SAACtD,EAASuD,GAAV,OACX,wBAAIpC,UAAWa,EAAiBhC,GAAUwD,IAAKD,GAC7C,yBAAKpC,UAAU,kBACXnB,EAAQP,UAEZ,yBAAK0B,UAAU,sBACXnB,EAAQA,cAMpB,yBAAKmB,UAAU,qBACb,0BAAMA,UAAU,aAAaC,SA5CT,SAAAC,GACxBA,EAAEC,iBAEFwB,EAAY9C,KA0CN,2BACEyB,KAAK,OACLN,UAAU,cACVS,MAAO5B,EACP6B,SAAU,SAAAR,GAAC,OAAIc,EAAWd,EAAES,OAAOF,UAErC,2BACEH,KAAK,SACLN,UAAU,4BC5DPsC,EAXA,kBACb,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAaC,KAAK,IAAIC,OAAK,EAACtD,UAAWW,IACvC,kBAAC,EAAD,CAAa0C,KAAK,SAASC,OAAK,EAACtD,UAAWW,IAE5C,kBAAC,EAAD,CAAc0C,KAAK,QAAQC,OAAK,EAACtD,UAAW6B,OCblD0B,IAASpD,OAAO,kBAAC,EAAD,MAAYqD,SAASC,eAAe,W","file":"static/js/main.257ce824.chunk.js","sourcesContent":["import io from 'socket.io-client';\nimport { socketUrl } from '../config/constants';\n\nexport const isAuthenticated = () => Boolean(getUsername());\n\nexport const getUsername = () => window.localStorage.getItem('username');\n\nexport const connectToChat = (username, callback) => {\n  const socket = io.connect(socketUrl);\n\n  socket.on('connect', () => {\n    callback.onConnected(socket);\n\n    socket.on('message', message => {\n      callback.onMessage(message);\n    });\n  });\n}\n\nexport const isSender = username => getUsername() === username;\n","export const socketUrl = 'https://chatroom-server-edumoreira1506.herokuapp.com/';\n","import React from 'react';\nimport { \n  Route,\n  Redirect\n} from 'react-router-dom';\nimport { isAuthenticated, getUsername } from '../../models/User';\n\nconst PrivateRoute = ({ component: Component, ...rest }) => {\n  const authenticated = isAuthenticated();\n  const username = getUsername();\n\n  return (\n    <Route \n      { ...rest } \n      render={props => (\n        authenticated ? (\n          <Component { ...props} username={username} />\n        ) : (\n          <Redirect to={{ pathname: '/login', state: { from: props.location } }} /> \n        )\n      )} \n    />\n  )\n}\n\nexport default PrivateRoute\n","import React from 'react';\nimport { \n  Route,\n  Redirect\n} from 'react-router-dom';\nimport { isAuthenticated } from '../../models/User';\n\nconst PublicRoute = ({ component: Component, ...rest }) => {\n  const authenticated = isAuthenticated();\n\n  return (\n    <Route \n      { ...rest } \n      render={props => (\n        authenticated ? (\n          <Redirect to={{ pathname: '/chat', state: { from: props.location } }} /> \n        ) : (\n          <Component { ...props} />\n        )\n      )} \n    />\n  )\n}\n\nexport default PublicRoute\n","import React, { useState } from 'react';\nimport { connectToChat } from '../../models/User';\n\nimport './index.scss';\n\nconst Login = () => {\n  const [ username, setUsername ] = useState('');\n\n  const handleLogin = e => {\n    e.preventDefault();\n\n    connectToChat(username, {\n      onConnected: () => {\n        window.localStorage.setItem('username', username);\n        window.location.href = 'chat';\n      }\n    });\n  }\n\n  return (\n    <section className=\"Login\">\n      <div className=\"Login__title\">\n        <h2 className=\"Login__title-text\">\n          MultroomChat - Login\n        </h2>\n      </div>\n      <div className=\"Login__form-area\">\n        <form className=\"Login__form\" onSubmit={handleLogin}>\n          <input\n            className=\"Login__input\"\n            type=\"text\"\n            placeholder=\"Nome aleatório ai caraio\"\n            required\n            value={username}\n            onChange={e => setUsername(e.target.value)}  \n          />\n          <input className=\"Login__input\" type=\"submit\" value=\"Submit\" required />\n        </form>\n      </div>\n    </section>\n  )\n};\n\nexport default Login;\n","export const validate = (message, callback) => {\n  if (isValid(message)) return callback.onValidated();\n\n  return callback.onError('Tamanho da mensagem inválida!');\n}\n\nexport const template = (username, message) => ({\n  username, message\n})\n\nconst isValid = message => Boolean(message);\n","import React, { useState, useEffect } from 'react';\nimport { connectToChat, isSender } from '../../models/User';\nimport classname from 'classnames';\nimport { validate, template } from '../../models/Message';\n\nimport './index.scss';\n\nconst messageClassName = ({ username }) => classname(\n  'Chat__message',\n  {\n    'Chat__message--black': isSender(username),\n    'Chat__message--grey': !isSender(username)\n  }\n)\n\nconst Chat = ({ username }) => {\n  const [ message, setMessage ] = useState('');\n  const [ messages, setMessages ] = useState([{ username: 'Pedro', message: 'alo' }]);\n  const [ socket, setSocket ] = useState(null);\n\n  useEffect(() => {\n    connectToChat(username, {\n      onConnected: socketIo => {\n        setSocket(socketIo)\n      },\n      onMessage: addMessage\n    })\n  }, [username]);\n\n  const handleSendMessage = e => {\n    e.preventDefault();\n\n    sendMessage(message);\n  }\n\n  const addMessage = newMessage => {\n    console.log(messages)\n    console.log(newMessage)\n    const oldMessages = [ ...messages ];\n\n    setMessages([...oldMessages, newMessage]);\n  }\n\n  const sendMessage = message => {\n    validate(message, {\n      onError: error => alert(error),\n      onValidated: () => {\n        const newMessage = template(username, message);\n        \n        socket.emit('message', newMessage);\n\n        addMessage(newMessage);\n      }\n    })\n  }\n\n  return (\n    <section className=\"Chat\">\n      <ul className=\"Chat__content\">\n        {\n          messages.map((message, index) =>\n            <li className={messageClassName(message)} key={index}>\n              <div className=\"Chat__username\">\n                { message.username }\n              </div>\n              <div className=\"Chat__message-text\">\n                { message.message }\n              </div>\n            </li>\n          )\n        }\n      </ul>\n      <div className=\"Chat__submit-area\">\n        <form className=\"Chat__form\" onSubmit={handleSendMessage}>\n          <input\n            type=\"text\"\n            className=\"Chat__input\"\n            value={message}\n            onChange={e => setMessage(e.target.value)}\n          />\n          <input\n            type=\"submit\"\n            className=\"Chat__submit-button\"\n          />\n        </form>\n      </div>\n    </section>\n  )\n};\n\nexport default Chat;\n","import React from 'react'\nimport { \n  BrowserRouter,\n  Switch\n} from 'react-router-dom';\nimport PrivateRoute from './PrivateRoute';\nimport PublicRoute from './PublicRoute';\n\nimport Login from '../../pages/Login';\nimport Chat from '../../pages/Chat';\n\nconst Routes = () => (\n  <BrowserRouter>\n    <Switch>\n      <PublicRoute path=\"/\" exact component={Login} />\n      <PublicRoute path=\"/login\" exact component={Login} />\n\n      <PrivateRoute path=\"/chat\" exact component={Chat} />\n    </Switch>\n  </BrowserRouter>\n);\n\nexport default Routes\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Routes from './config/routes';\n\nReactDOM.render(<Routes />, document.getElementById('root'));\n"],"sourceRoot":""}